From dc20e8f6540b84b012460d6f8967b43e92570c8e Mon Sep 17 00:00:00 2001
From: IsaiahPatton <isaiahpatton1@gmail.com>
Date: Thu, 29 Jun 2017 11:29:15 -0400
Subject: [PATCH] use diamond operators

---
 .../src/main/java/PluginReference/BlockHelper.java       |  6 +++---
 .../src/main/java/PluginReference/PluginInfo.java        |  2 +-
 .../src/main/java/PluginReference/RainbowUtils.java      |  2 +-
 rainbow/src/main/java/org/projectrainbow/_Announcer.java |  2 +-
 rainbow/src/main/java/org/projectrainbow/_DynReward.java | 12 ++++++------
 .../main/java/org/projectrainbow/_EconomyManager.java    | 12 ++++++------
 .../src/main/java/org/projectrainbow/_EmoteUtils.java    |  8 ++++----
 .../src/main/java/org/projectrainbow/_EventManager.java  |  6 +++---
 rainbow/src/main/java/org/projectrainbow/_HomeUtils.java | 12 ++++++------
 .../java/org/projectrainbow/_JOT_OnlineTimeUtils.java    |  2 +-
 rainbow/src/main/java/org/projectrainbow/_PermMgr.java   | 12 ++++++------
 .../src/main/java/org/projectrainbow/_UUIDMapper.java    | 16 ++++++++--------
 .../main/java/org/projectrainbow/launch/Bootstrap.java   |  2 +-
 .../org/projectrainbow/mixins/MixinEntityArmorStand.java |  2 +-
 .../java/org/projectrainbow/mixins/MixinItemStack.java   |  4 ++--
 .../org/projectrainbow/mixins/MixinTileEntitySign.java   |  2 +-
 .../org/projectrainbow/plugins/PluginClassLoader.java    |  2 +-
 .../java/org/projectrainbow/plugins/PluginManager.java   |  6 +++---
 18 files changed, 55 insertions(+), 55 deletions(-)

diff --git a/PluginReference/src/main/java/PluginReference/BlockHelper.java b/PluginReference/src/main/java/PluginReference/BlockHelper.java
index 12a08e6..a39e7e2 100644
--- a/PluginReference/src/main/java/PluginReference/BlockHelper.java
+++ b/PluginReference/src/main/java/PluginReference/BlockHelper.java
@@ -12,17 +12,17 @@ public class BlockHelper
      * Map of Block ID to internal Block Name
      * For example, 8 maps to 'flowing_water'
      */ 			
-	public static Map<Integer, String> mapBlockNames = new ConcurrentHashMap<Integer, String>();
+	public static Map<Integer, String> mapBlockNames = new ConcurrentHashMap<>();
 	 /** 
      * Map of ID:Subtype string to friendly Block Name
      * For example, "126:5" maps to "Dark Oak Wood Slab"
      */ 			
-	public static Map<String, String> mapItemNames = new ConcurrentHashMap<String, String>();
+	public static Map<String, String> mapItemNames = new ConcurrentHashMap<>();
 	 /**
      * Map of ID to number of subtypes
      * For example, ID 1 maps to 7 because there are 7 stone subtypes in MC 1.8
      */ 			
-	public static Map<Integer, Integer> mapNumSubtypes = new ConcurrentHashMap<Integer, Integer>();
+	public static Map<Integer, Integer> mapNumSubtypes = new ConcurrentHashMap<>();
 
 	 /** 
      * Get internal block name from ID.
diff --git a/PluginReference/src/main/java/PluginReference/PluginInfo.java b/PluginReference/src/main/java/PluginReference/PluginInfo.java
index b5d5188..4103132 100644
--- a/PluginReference/src/main/java/PluginReference/PluginInfo.java
+++ b/PluginReference/src/main/java/PluginReference/PluginInfo.java
@@ -32,7 +32,7 @@ public class PluginInfo
 	/** 
      * Optional data (can be used for inter-plugin communication)
      */ 			
-	public ConcurrentHashMap<String, String> optionalData = new ConcurrentHashMap<String, String>(); 
+	public ConcurrentHashMap<String, String> optionalData = new ConcurrentHashMap<>(); 
 
 	// The below will be set by Rainbow, you can use if needed after retrieving with server.getPlugins()
 	/** 
diff --git a/PluginReference/src/main/java/PluginReference/RainbowUtils.java b/PluginReference/src/main/java/PluginReference/RainbowUtils.java
index 795107a..2070e85 100644
--- a/PluginReference/src/main/java/PluginReference/RainbowUtils.java
+++ b/PluginReference/src/main/java/PluginReference/RainbowUtils.java
@@ -71,7 +71,7 @@ public class RainbowUtils
      */ 			
 	public static String GetCommaList(Collection<String> arr, boolean doSort)
 	{
-		ArrayList<String> list = new ArrayList<String>(arr);
+		ArrayList<String> list = new ArrayList<>(arr);
 		
 		StringBuffer buf = new StringBuffer();
 		Collections.sort(list);
diff --git a/rainbow/src/main/java/org/projectrainbow/_Announcer.java b/rainbow/src/main/java/org/projectrainbow/_Announcer.java
index 595d2bc..6ff19cc 100755
--- a/rainbow/src/main/java/org/projectrainbow/_Announcer.java
+++ b/rainbow/src/main/java/org/projectrainbow/_Announcer.java
@@ -28,7 +28,7 @@ public class _Announcer {
         try {
             Seconds = 60;
             AnnouncerPrefix = ChatColor.RED + "[Announcement]";
-            announcements = new ArrayList<String>();
+            announcements = new ArrayList<>();
             File exc = new File(_DiwUtils.RainbowDataDirectory + Filename);
             File oldFile = new File(Filename);
 
diff --git a/rainbow/src/main/java/org/projectrainbow/_DynReward.java b/rainbow/src/main/java/org/projectrainbow/_DynReward.java
index 92b0174..3b90124 100755
--- a/rainbow/src/main/java/org/projectrainbow/_DynReward.java
+++ b/rainbow/src/main/java/org/projectrainbow/_DynReward.java
@@ -22,10 +22,10 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class _DynReward {
 
-    public static Map<String, _SerializableLocation> LastSelection = new ConcurrentHashMap<String, _SerializableLocation>();
+    public static Map<String, _SerializableLocation> LastSelection = new ConcurrentHashMap<>();
     public static String MsgPrefix = ChatColor.LIGHT_PURPLE + "[Reward] ";
-    public static Map<String, _DynRewardInfo> RewardMarkers = new HashMap<String, _DynRewardInfo>();
-    public static Map<String, Long> timeSince = new ConcurrentHashMap<String, Long>();
+    public static Map<String, _DynRewardInfo> RewardMarkers = new HashMap<>();
+    public static Map<String, Long> timeSince = new ConcurrentHashMap<>();
     private static String OldFilename = "JkcDynRewards2.dat";
     private static String Filename = "DynamicRewards.dat";
 
@@ -47,7 +47,7 @@ public class _DynReward {
             }
 
             if (!file.exists()) {
-                RewardMarkers = new HashMap<String, _DynRewardInfo>();
+                RewardMarkers = new HashMap<>();
                 return;
             }
 
@@ -58,7 +58,7 @@ public class _DynReward {
             s.close();
         } catch (Throwable var4) {
             var4.printStackTrace();
-            RewardMarkers = new HashMap<String, _DynRewardInfo>();
+            RewardMarkers = new HashMap<>();
         }
 
     }
@@ -248,7 +248,7 @@ public class _DynReward {
                                 }
 
                                 if (info.Rewards == null) {
-                                    info.Rewards = new HashMap<Integer, Integer>();
+                                    info.Rewards = new HashMap<>();
                                 }
 
                                 info.Rewards.put(itemID1,
diff --git a/rainbow/src/main/java/org/projectrainbow/_EconomyManager.java b/rainbow/src/main/java/org/projectrainbow/_EconomyManager.java
index b991382..0166ec2 100755
--- a/rainbow/src/main/java/org/projectrainbow/_EconomyManager.java
+++ b/rainbow/src/main/java/org/projectrainbow/_EconomyManager.java
@@ -21,8 +21,8 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class _EconomyManager {
 
-    public static Map<String, Double> economy = new ConcurrentHashMap<String, Double>();
-    public static Map<String, Double> itemWorth = new ConcurrentHashMap<String, Double>();
+    public static Map<String, Double> economy = new ConcurrentHashMap<>();
+    public static Map<String, Double> itemWorth = new ConcurrentHashMap<>();
     private static String Filename = "Economy.dat";
 
     public _EconomyManager() {
@@ -62,8 +62,8 @@ public class _EconomyManager {
 
             if (!file.exists()) {
                 System.out.println("Starting New Economy: " + Filename);
-                economy = new ConcurrentHashMap<String, Double>();
-                itemWorth = new ConcurrentHashMap<String, Double>();
+                economy = new ConcurrentHashMap<>();
+                itemWorth = new ConcurrentHashMap<>();
                 return;
             }
 
@@ -77,8 +77,8 @@ public class _EconomyManager {
         } catch (Throwable var4) {
             var4.printStackTrace();
             System.out.println("Starting New Economy: " + Filename);
-            economy = new ConcurrentHashMap<String, Double>();
-            itemWorth = new ConcurrentHashMap<String, Double>();
+            economy = new ConcurrentHashMap<>();
+            itemWorth = new ConcurrentHashMap<>();
         }
     }
 
diff --git a/rainbow/src/main/java/org/projectrainbow/_EmoteUtils.java b/rainbow/src/main/java/org/projectrainbow/_EmoteUtils.java
index 36f9021..cdda081 100755
--- a/rainbow/src/main/java/org/projectrainbow/_EmoteUtils.java
+++ b/rainbow/src/main/java/org/projectrainbow/_EmoteUtils.java
@@ -22,7 +22,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class _EmoteUtils {
 
-    public static Map<String, _EmoteEntry> emotes = new ConcurrentHashMap<String, _EmoteEntry>();
+    public static Map<String, _EmoteEntry> emotes = new ConcurrentHashMap<>();
     private static String OldFilename = "Emotes.dat.vSnapshot";
     private static String Filename = "Emotes.dat";
 
@@ -40,7 +40,7 @@ public class _EmoteUtils {
 
             if (!file.exists()) {
                 _DiwUtils.ConsoleMsg("Starting New Emote Database...");
-                emotes = new ConcurrentHashMap<String, _EmoteEntry>();
+                emotes = new ConcurrentHashMap<>();
                 return;
             }
 
@@ -61,7 +61,7 @@ public class _EmoteUtils {
         } catch (Throwable var9) {
             var9.printStackTrace();
             _DiwUtils.ConsoleMsg("Starting New Emote Database...");
-            emotes = new ConcurrentHashMap<String, _EmoteEntry>();
+            emotes = new ConcurrentHashMap<>();
         }
 
     }
@@ -202,7 +202,7 @@ public class _EmoteUtils {
             _DiwUtils.reply(cs, ChatColor.GREEN + "All Emotes: " + ChatColor.YELLOW + emote);
             return true;
         } else if (args.length >= 1 && args[0].equalsIgnoreCase("mine")) {
-            ArrayList<String> emote1 = new ArrayList<String>(emotes.keySet());
+            ArrayList<String> emote1 = new ArrayList<>(emotes.keySet());
 
             new StringBuffer();
             Collections.sort(emote1);
diff --git a/rainbow/src/main/java/org/projectrainbow/_EventManager.java b/rainbow/src/main/java/org/projectrainbow/_EventManager.java
index 379f27a..3f27a1d 100755
--- a/rainbow/src/main/java/org/projectrainbow/_EventManager.java
+++ b/rainbow/src/main/java/org/projectrainbow/_EventManager.java
@@ -17,7 +17,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class _EventManager {
 
-    public static Map<String, Long> eventCount = new ConcurrentHashMap<String, Long>();
+    public static Map<String, Long> eventCount = new ConcurrentHashMap<>();
     private static String OldFilename = "EventCounts2.dat";
     private static String Filename = "EventCounts.dat";
 
@@ -57,7 +57,7 @@ public class _EventManager {
 
             if (!file.exists()) {
                 System.out.println("Starting New Event Count DB: " + Filename);
-                eventCount = new ConcurrentHashMap<String, Long>();
+                eventCount = new ConcurrentHashMap<>();
                 return;
             }
 
@@ -70,7 +70,7 @@ public class _EventManager {
         } catch (Throwable var4) {
             var4.printStackTrace();
             System.out.println("Starting New Event Count DB: " + Filename);
-            eventCount = new ConcurrentHashMap<String, Long>();
+            eventCount = new ConcurrentHashMap<>();
         }
 
     }
diff --git a/rainbow/src/main/java/org/projectrainbow/_HomeUtils.java b/rainbow/src/main/java/org/projectrainbow/_HomeUtils.java
index 5f2bd03..cd6dba5 100644
--- a/rainbow/src/main/java/org/projectrainbow/_HomeUtils.java
+++ b/rainbow/src/main/java/org/projectrainbow/_HomeUtils.java
@@ -19,8 +19,8 @@ public class _HomeUtils {
     private static String DataFilename2;
 
     static {
-        _HomeUtils.playerHomes = new ConcurrentHashMap<String, _SerializableLocation>();
-        _HomeUtils.playerHomes2 = new ConcurrentHashMap<String, _SerializableLocation>();
+        _HomeUtils.playerHomes = new ConcurrentHashMap<>();
+        _HomeUtils.playerHomes2 = new ConcurrentHashMap<>();
         _HomeUtils.DataFilename = "Homes.dat";
         _HomeUtils.DataFilename2 = "Homes2.dat";
     }
@@ -61,7 +61,7 @@ public class _HomeUtils {
             }
             if (!file.exists()) {
                 System.out.println("Starting New Home Database...");
-                _HomeUtils.playerHomes = new ConcurrentHashMap<String, _SerializableLocation>();
+                _HomeUtils.playerHomes = new ConcurrentHashMap<>();
                 return;
             }
             final FileInputStream f = new FileInputStream(file);
@@ -73,7 +73,7 @@ public class _HomeUtils {
         } catch (Throwable exc) {
             exc.printStackTrace();
             System.out.println("Starting New Home Database...");
-            _HomeUtils.playerHomes = new ConcurrentHashMap<String, _SerializableLocation>();
+            _HomeUtils.playerHomes = new ConcurrentHashMap<>();
         }
     }
 
@@ -104,7 +104,7 @@ public class _HomeUtils {
             }
             if (!file.exists()) {
                 System.out.println("Starting New Home2 Database...");
-                _HomeUtils.playerHomes2 = new ConcurrentHashMap<String, _SerializableLocation>();
+                _HomeUtils.playerHomes2 = new ConcurrentHashMap<>();
                 return;
             }
             final FileInputStream f = new FileInputStream(file);
@@ -116,7 +116,7 @@ public class _HomeUtils {
         } catch (Throwable exc) {
             exc.printStackTrace();
             System.out.println("Starting New Home2 Database...");
-            _HomeUtils.playerHomes2 = new ConcurrentHashMap<String, _SerializableLocation>();
+            _HomeUtils.playerHomes2 = new ConcurrentHashMap<>();
         }
     }
 
diff --git a/rainbow/src/main/java/org/projectrainbow/_JOT_OnlineTimeUtils.java b/rainbow/src/main/java/org/projectrainbow/_JOT_OnlineTimeUtils.java
index e587328..dd4e4c7 100755
--- a/rainbow/src/main/java/org/projectrainbow/_JOT_OnlineTimeUtils.java
+++ b/rainbow/src/main/java/org/projectrainbow/_JOT_OnlineTimeUtils.java
@@ -287,7 +287,7 @@ public class _JOT_OnlineTimeUtils {
         byte recordsPerPage = 8;
         int idxStart = recordsPerPage * (page - 1);
         int idxEnd = idxStart + recordsPerPage;
-        ArrayList<String> names = new ArrayList<String>(Data.playerData.keySet());
+        ArrayList<String> names = new ArrayList<>(Data.playerData.keySet());
 
         if (!CanSeeHidden(cs)) {
             for (int strPage = names.size() - 1; strPage >= 0; --strPage) {
diff --git a/rainbow/src/main/java/org/projectrainbow/_PermMgr.java b/rainbow/src/main/java/org/projectrainbow/_PermMgr.java
index ad6910a..9eacbd8 100755
--- a/rainbow/src/main/java/org/projectrainbow/_PermMgr.java
+++ b/rainbow/src/main/java/org/projectrainbow/_PermMgr.java
@@ -20,7 +20,7 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class _PermMgr {
 
-    private static Map<String, ConcurrentHashMap<String, Boolean>> permData = new ConcurrentHashMap<String, ConcurrentHashMap<String, Boolean>>();
+    private static Map<String, ConcurrentHashMap<String, Boolean>> permData = new ConcurrentHashMap<>();
     public static String m_DataFilename = "PermissionData.dat";
 
     public _PermMgr() {
@@ -66,7 +66,7 @@ public class _PermMgr {
 
             if (!file.exists()) {
                 _DiwUtils.ConsoleMsg("Loading Permissions: Starting new file: " + m_DataFilename);
-                permData = new ConcurrentHashMap<String, ConcurrentHashMap<String, Boolean>>();
+                permData = new ConcurrentHashMap<>();
                 return;
             }
 
@@ -82,7 +82,7 @@ public class _PermMgr {
         } catch (Throwable var8) {
             var8.printStackTrace();
             _DiwUtils.ConsoleMsg("Loading Permissions: Starting new file: " + m_DataFilename);
-            permData = new ConcurrentHashMap<String, ConcurrentHashMap<String, Boolean>>();
+            permData = new ConcurrentHashMap<>();
         }
 
     }
@@ -94,7 +94,7 @@ public class _PermMgr {
             ConcurrentHashMap<String, Boolean> map = permData.get(key);
 
             if (map == null) {
-                map = new ConcurrentHashMap<String, Boolean>();
+                map = new ConcurrentHashMap<>();
             }
 
             map.put(perm, true);
@@ -103,7 +103,7 @@ public class _PermMgr {
     }
 
     public static List<String> getPermissions(UUID uuid) {
-        ArrayList<String> perms = new ArrayList<String>();
+        ArrayList<String> perms = new ArrayList<>();
 
         String key = uuid == null ? "*" : uuid.toString();
         Map<String, Boolean> map = permData.get(key);
@@ -173,6 +173,6 @@ public class _PermMgr {
     }
 
     public static void clearAllPermissions() {
-        permData = new ConcurrentHashMap<String, ConcurrentHashMap<String, Boolean>>();
+        permData = new ConcurrentHashMap<>();
     }
 }
diff --git a/rainbow/src/main/java/org/projectrainbow/_UUIDMapper.java b/rainbow/src/main/java/org/projectrainbow/_UUIDMapper.java
index 94ab02f..734ef23 100755
--- a/rainbow/src/main/java/org/projectrainbow/_UUIDMapper.java
+++ b/rainbow/src/main/java/org/projectrainbow/_UUIDMapper.java
@@ -20,8 +20,8 @@ import java.util.concurrent.ConcurrentHashMap;
 
 public class _UUIDMapper {
 
-    private static Map<String, String> LowerNameToUUID = new ConcurrentHashMap<String, String>();
-    private static Map<String, List<String>> UUIDToNameList = new ConcurrentHashMap<String, List<String>>();
+    private static Map<String, String> LowerNameToUUID = new ConcurrentHashMap<>();
+    private static Map<String, List<String>> UUIDToNameList = new ConcurrentHashMap<>();
     private static String OldFilename = "Joe_UUID_Mapping.dat";
     private static String Filename = "Player_UUID_Mapping.dat";
 
@@ -78,8 +78,8 @@ public class _UUIDMapper {
 
             if (!file.exists()) {
                 System.out.println("Starting New NameToUUID: " + Filename);
-                LowerNameToUUID = new ConcurrentHashMap<String, String>();
-                UUIDToNameList = new ConcurrentHashMap<String, List<String>>();
+                LowerNameToUUID = new ConcurrentHashMap<>();
+                UUIDToNameList = new ConcurrentHashMap<>();
                 return;
             }
 
@@ -92,15 +92,15 @@ public class _UUIDMapper {
             try {
                 UUIDToNameList = (Map<String, List<String>>) s.readObject();
             } catch (Exception var5) {
-                UUIDToNameList = new ConcurrentHashMap<String, List<String>>();
+                UUIDToNameList = new ConcurrentHashMap<>();
             }
 
             s.close();
         } catch (Throwable var6) {
             var6.printStackTrace();
             System.out.println("Starting New NameToUUID: " + Filename);
-            LowerNameToUUID = new ConcurrentHashMap<String, String>();
-            UUIDToNameList = new ConcurrentHashMap<String, List<String>>();
+            LowerNameToUUID = new ConcurrentHashMap<>();
+            UUIDToNameList = new ConcurrentHashMap<>();
         }
 
     }
@@ -114,7 +114,7 @@ public class _UUIDMapper {
         List<String> nameList = UUIDToNameList.get(uuid);
 
         if (nameList == null) {
-            nameList = new ArrayList<String>();
+            nameList = new ArrayList<>();
         }
 
         if (!nameList.contains(pName)) {
diff --git a/rainbow/src/main/java/org/projectrainbow/launch/Bootstrap.java b/rainbow/src/main/java/org/projectrainbow/launch/Bootstrap.java
index a548674..001c0b4 100644
--- a/rainbow/src/main/java/org/projectrainbow/launch/Bootstrap.java
+++ b/rainbow/src/main/java/org/projectrainbow/launch/Bootstrap.java
@@ -20,7 +20,7 @@ import java.util.jar.Manifest;
 
 public class Bootstrap {
     public static String[] args;
-    public static Set<File> tweakers = new HashSet<File>();
+    public static Set<File> tweakers = new HashSet<>();
 
     public final static String minecraftVersion;
     public final static String buildNumber;
diff --git a/rainbow/src/main/java/org/projectrainbow/mixins/MixinEntityArmorStand.java b/rainbow/src/main/java/org/projectrainbow/mixins/MixinEntityArmorStand.java
index 7d5aeda..ae80b90 100644
--- a/rainbow/src/main/java/org/projectrainbow/mixins/MixinEntityArmorStand.java
+++ b/rainbow/src/main/java/org/projectrainbow/mixins/MixinEntityArmorStand.java
@@ -163,7 +163,7 @@ public abstract class MixinEntityArmorStand extends MixinEntityLivingBase implem
 
     @Override
     public List<MC_FloatTriplet> getPose() {
-        ArrayList<MC_FloatTriplet> pose = new ArrayList<MC_FloatTriplet>();
+        ArrayList<MC_FloatTriplet> pose = new ArrayList<>();
         pose.add(wrap(this.headRotation));
         pose.add(wrap(this.bodyRotation));
         pose.add(wrap(this.leftArmRotation));
diff --git a/rainbow/src/main/java/org/projectrainbow/mixins/MixinItemStack.java b/rainbow/src/main/java/org/projectrainbow/mixins/MixinItemStack.java
index ec94877..8e83951 100644
--- a/rainbow/src/main/java/org/projectrainbow/mixins/MixinItemStack.java
+++ b/rainbow/src/main/java/org/projectrainbow/mixins/MixinItemStack.java
@@ -167,7 +167,7 @@ public abstract class MixinItemStack implements MC_ItemStack {
         if (!isItemEnchanted()) {
             return Collections.emptyList();
         }
-        List<MC_Enchantment> enchantments = new ArrayList<MC_Enchantment>();
+        List<MC_Enchantment> enchantments = new ArrayList<>();
         NBTTagList var3 = this.stackTagCompound.getTagList("ench", 10);
         for (int i = 0; i < var3.tagCount(); i++) {
             enchantments.add(new MC_Enchantment(PluginHelper.enchantmentMap.get(var3.getCompoundTagAt(i).getShort("id")), var3.getCompoundTagAt(i).getShort("lvl")));
@@ -220,7 +220,7 @@ public abstract class MixinItemStack implements MC_ItemStack {
             if (!display.hasKey("Lore")) {
                 return null;
             } else {
-                ArrayList<String> res = new ArrayList<String>();
+                ArrayList<String> res = new ArrayList<>();
                 NBTTagList lore = display.getTagList("Lore", 8);
 
                 for (int i = 0; i < lore.tagCount(); ++i) {
diff --git a/rainbow/src/main/java/org/projectrainbow/mixins/MixinTileEntitySign.java b/rainbow/src/main/java/org/projectrainbow/mixins/MixinTileEntitySign.java
index 16f2385..509df2e 100644
--- a/rainbow/src/main/java/org/projectrainbow/mixins/MixinTileEntitySign.java
+++ b/rainbow/src/main/java/org/projectrainbow/mixins/MixinTileEntitySign.java
@@ -20,7 +20,7 @@ public class MixinTileEntitySign extends TileEntity implements MC_Sign {
 
     @Override
     public List<String> getLines() {
-        ArrayList<String> list = new ArrayList<String>(4);
+        ArrayList<String> list = new ArrayList<>(4);
         for (ITextComponent chatComponent : signText) {
             list.add(chatComponent.getUnformattedText());
         }
diff --git a/rainbow/src/main/java/org/projectrainbow/plugins/PluginClassLoader.java b/rainbow/src/main/java/org/projectrainbow/plugins/PluginClassLoader.java
index 522a325..096cb81 100644
--- a/rainbow/src/main/java/org/projectrainbow/plugins/PluginClassLoader.java
+++ b/rainbow/src/main/java/org/projectrainbow/plugins/PluginClassLoader.java
@@ -14,7 +14,7 @@ import java.util.concurrent.ConcurrentHashMap;
  * Created by florian on 20.12.14.
  */
 public class PluginClassLoader extends URLClassLoader {
-	private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
+	private final Map<String, Class<?>> classes = new ConcurrentHashMap<>();
 	private final PluginManager pluginManager;
 	private final File file;
 
diff --git a/rainbow/src/main/java/org/projectrainbow/plugins/PluginManager.java b/rainbow/src/main/java/org/projectrainbow/plugins/PluginManager.java
index 77aaa95..e52d3de 100644
--- a/rainbow/src/main/java/org/projectrainbow/plugins/PluginManager.java
+++ b/rainbow/src/main/java/org/projectrainbow/plugins/PluginManager.java
@@ -18,9 +18,9 @@ import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
 
 public class PluginManager {
-    public ArrayList<PluginInfo> plugins = new ArrayList<PluginInfo>();
-    private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
-    private final List<PluginClassLoader> loaders = new ArrayList<PluginClassLoader>();
+    public ArrayList<PluginInfo> plugins = new ArrayList<>();
+    private final Map<String, Class<?>> classes = new ConcurrentHashMap<>();
+    private final List<PluginClassLoader> loaders = new ArrayList<>();
 
     public void enable() {
         LoadPlugins();
-- 
2.13.0.windows.1

